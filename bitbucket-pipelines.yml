pipelines:
  default:
    - parallel:
        - step:
            name: Build and Test Multi-Platform Images
            image: atlassian/default-image:4
            runs-on:
              - linux
              - self.hosted  # 使用自托管的 Linux 机器进行构建
            services:
              - docker  # 启用 Docker 服务
            script:
              - echo "Executing on self-hosted runner" 
              # 配置 Docker CLI 启用 Buildx 实验性功能
              - export DOCKER_CLI_EXPERIMENTAL=enabled 
              - export BUILDX_VERSION=0.22.0  # 定义要下载的 Buildx 版本
              
              # 下载并安装 Buildx 插件
              - curl -fsSLO https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-amd64
              - mkdir -p $HOME/.docker/cli-plugins/ && mv buildx-v${BUILDX_VERSION}.linux-amd64 $HOME/.docker/cli-plugins/docker-buildx && chmod +x ~/.docker/cli-plugins/docker-buildx
              
              # 启动 QEMU 模拟环境，支持跨架构构建
              - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              - docker buildx create --use  # 启用 Buildx 构建器

              # 登录 Docker Hub
              - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
              
              # 获取镜像名，通常为仓库名（Bitbucket Repo Slug）
              - IMAGE_NAME=$BITBUCKET_REPO_SLUG
              
              # 构建并推送多平台镜像（支持 amd64, arm64, arm/v7）
              - docker buildx build --platform linux/amd64,linux/arm64 . --file Dockerfile --tag $DOCKERHUB_USERNAME/$IMAGE_NAME:$BITBUCKET_BRANCH --push
              
        - step:
            name: Lint the Dockerfile
            image: hadolint/hadolint:latest-debian  # 使用 Hadolint 镜像进行 Dockerfile 检查
            script:
              - hadolint Dockerfile  # 检查 Dockerfile 是否符合规范
 
definitions:
  services:
    docker:
      image: docker:dind  # 使用 Docker-in-Docker 服务以启用 Docker 构建