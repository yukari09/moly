defmodule Moly.Repo.Migrations.Rebuilde do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:confirmed_at, :utc_datetime_usec)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)
      add(:roles, {:array, :text}, null: false)
      add(:status, :text, null: false, default: "inactive")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:user_post_actions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:action, :text, null: false)

      add(:created_at, :utc_datetime,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "user_post_actions_user_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(:post_id, :uuid, null: false)
    end

    create table(:user_meta, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:meta_key, :text, null: false)
      add(:meta_value, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "user_meta_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:user_meta, [:meta_key, :user_id],
             name: "user_meta_meta_key_with_user_id_index"
           )

    create table(:tokens, primary_key: false) do
      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:jti, :text, null: false, primary_key: true)
      add(:subject, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:purpose, :text, null: false)
      add(:extra_data, :map)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:terms, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:slug, :text, null: false)
      add(:term_group, :bigint, null: false, default: 0)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:terms, [:slug], name: "terms_unique_slug_index")

    create table(:term_taxonomies, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:taxonomy, :text, null: false)
      add(:description, :text, default: "")
      add(:count, :bigint, null: false, default: 0)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :term_id,
        references(:terms,
          column: :id,
          name: "term_taxonomies_term_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :parent_id,
        references(:terms,
          column: :id,
          name: "term_taxonomies_parent_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:term_taxonomies, [:term_id, :taxonomy],
             name: "term_taxonomies_taxonomy_term_id_index"
           )

    create table(:term_relationships, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:term_order, :bigint, default: 0)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :term_taxonomy_id,
        references(:term_taxonomies,
          column: :id,
          name: "term_relationships_term_taxonomy_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(:post_id, :uuid)
    end

    create table(:term_meta, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:term_key, :text, null: false)
      add(:term_value, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :term_id,
        references(:terms,
          column: :id,
          name: "term_meta_term_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:term_meta, [:term_key, :term_value],
             name: "term_meta_term_key_value_index"
           )

    create unique_index(:term_meta, [:term_id, :term_key, :term_value],
             name: "term_meta_term_key_value_with_id_index"
           )

    create table(:posts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:user_post_actions) do
      modify(
        :post_id,
        references(:posts,
          column: :id,
          name: "user_post_actions_post_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:user_post_actions, [:user_id, :post_id, :action],
             name: "user_post_actions_unique_user_id_post_id_action_index"
           )

    alter table(:term_relationships) do
      modify(
        :post_id,
        references(:posts,
          column: :id,
          name: "term_relationships_to_posts_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all,
          on_update: :update_all
        )
      )
    end

    create unique_index(:term_relationships, [:term_taxonomy_id, :post_id],
             name: "term_relationships_post_id_term_taxonomy_id_index"
           )

    alter table(:posts) do
      add(:post_title, :text, null: false)
      add(:post_content, :text)
      add(:post_excerpt, :text)
      add(:post_status, :text, null: false, default: "draft")
      add(:post_type, :text, null: false, default: "post")
      add(:comment_status, :boolean, null: false, default: false)
      add(:ping_status, :boolean, null: false, default: false)
      add(:to_ping, {:array, :text}, null: false, default: [])
      add(:pinged, {:array, :text}, null: false, default: [])
      add(:guid, :text)
      add(:menu_order, :bigint, null: false, default: 0)
      add(:post_mime_type, :text, null: false, default: "post")
      add(:post_date, :utc_datetime, null: false)
      add(:comment_count, :bigint, null: false, default: 0)
      add(:post_password, :text)
      add(:post_name, :text)
      add(:post_content_filtered, :text, default: "")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :author_id,
        references(:users,
          column: :id,
          name: "posts_author_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :post_parent,
        references(:posts,
          column: :id,
          name: "posts_post_parent_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create index(:posts, [:post_status], name: "post_status_idx")

    create unique_index(:posts, [:post_name], name: "posts_unique_post_name_index")

    create table(:post_meta, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:meta_key, :text, null: false)
      add(:meta_value, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :post_id,
        references(:posts,
          column: :id,
          name: "post_meta_post_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )
    end

    create unique_index(:post_meta, [:meta_key, :post_id],
             name: "post_meta_meta_key_with_post_id_index"
           )

    create table(:options, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:option_name, :text, null: false)
      add(:option_value, :text, null: false)
      add(:autoload, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:comments, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:comment_content, :text, null: false)
      add(:comment_author_email, :text, null: false)
      add(:comment_author_url, :text, null: false)
      add(:comment_author_ip, :text, null: false)
      add(:comment_type, :text, null: false, default: "comment")
      add(:comment_approved, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :comment_author_id,
        references(:users,
          column: :id,
          name: "comments_comment_author_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :comment_post_id,
        references(:posts,
          column: :id,
          name: "comments_comment_post_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :comment_parent_id,
        references(:comments,
          column: :id,
          name: "comments_comment_parent_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create table(:comment_meta, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:meta_key, :text)
      add(:meta_value, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :comment_id,
        references(:comments,
          column: :id,
          name: "comment_meta_comment_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:comment_meta, [:meta_key, :comment_id],
             name: "comment_meta_meta_key_with_comment_id_index"
           )

    execute("""
    CREATE INDEX meta_value_idx ON post_meta (substring(meta_value FROM 1 FOR 16));
    """)

    execute("""
    CREATE INDEX pgweb_idx ON posts USING GIN (to_tsvector('english', post_title || ' ' || post_content));
    """)
  end

  def down do
    execute("""
    DROP INDEX pgweb_idx;
    """)

    execute("""
    DROP INDEX meta_value_idx;
    """)

    drop_if_exists(
      unique_index(:comment_meta, [:meta_key, :comment_id],
        name: "comment_meta_meta_key_with_comment_id_index"
      )
    )

    drop(constraint(:comment_meta, "comment_meta_comment_id_fkey"))

    drop(table(:comment_meta))

    drop(constraint(:comments, "comments_comment_author_id_fkey"))

    drop(constraint(:comments, "comments_comment_post_id_fkey"))

    drop(constraint(:comments, "comments_comment_parent_id_fkey"))

    drop(table(:comments))

    drop(table(:options))

    drop_if_exists(
      unique_index(:post_meta, [:meta_key, :post_id],
        name: "post_meta_meta_key_with_post_id_index"
      )
    )

    drop(constraint(:post_meta, "post_meta_post_id_fkey"))

    drop(table(:post_meta))

    drop_if_exists(unique_index(:posts, [:post_name], name: "posts_unique_post_name_index"))

    drop(constraint(:posts, "posts_author_id_fkey"))

    drop(constraint(:posts, "posts_post_parent_fkey"))

    drop_if_exists(index(:posts, [:post_status], name: "post_status_idx"))

    alter table(:posts) do
      remove(:post_parent)
      remove(:author_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:post_content_filtered)
      remove(:post_name)
      remove(:post_password)
      remove(:comment_count)
      remove(:post_date)
      remove(:post_mime_type)
      remove(:menu_order)
      remove(:guid)
      remove(:pinged)
      remove(:to_ping)
      remove(:ping_status)
      remove(:comment_status)
      remove(:post_type)
      remove(:post_status)
      remove(:post_excerpt)
      remove(:post_content)
      remove(:post_title)
    end

    drop_if_exists(
      unique_index(:term_relationships, [:term_taxonomy_id, :post_id],
        name: "term_relationships_post_id_term_taxonomy_id_index"
      )
    )

    drop(constraint(:term_relationships, "term_relationships_to_posts_fkey"))

    alter table(:term_relationships) do
      modify(:post_id, :uuid)
    end

    drop_if_exists(
      unique_index(:user_post_actions, [:user_id, :post_id, :action],
        name: "user_post_actions_unique_user_id_post_id_action_index"
      )
    )

    drop(constraint(:user_post_actions, "user_post_actions_post_id_fkey"))

    alter table(:user_post_actions) do
      modify(:post_id, :uuid)
    end

    drop(table(:posts))

    drop_if_exists(
      unique_index(:term_meta, [:term_id, :term_key, :term_value],
        name: "term_meta_term_key_value_with_id_index"
      )
    )

    drop_if_exists(
      unique_index(:term_meta, [:term_key, :term_value], name: "term_meta_term_key_value_index")
    )

    drop(constraint(:term_meta, "term_meta_term_id_fkey"))

    drop(table(:term_meta))

    drop(constraint(:term_relationships, "term_relationships_term_taxonomy_id_fkey"))

    drop(table(:term_relationships))

    drop_if_exists(
      unique_index(:term_taxonomies, [:term_id, :taxonomy],
        name: "term_taxonomies_taxonomy_term_id_index"
      )
    )

    drop(constraint(:term_taxonomies, "term_taxonomies_term_id_fkey"))

    drop(constraint(:term_taxonomies, "term_taxonomies_parent_id_fkey"))

    drop(table(:term_taxonomies))

    drop_if_exists(unique_index(:terms, [:slug], name: "terms_unique_slug_index"))

    drop(table(:terms))

    drop(table(:tokens))

    drop_if_exists(
      unique_index(:user_meta, [:meta_key, :user_id],
        name: "user_meta_meta_key_with_user_id_index"
      )
    )

    drop(constraint(:user_meta, "user_meta_user_id_fkey"))

    drop(table(:user_meta))

    drop(constraint(:user_post_actions, "user_post_actions_user_id_fkey"))

    drop(table(:user_post_actions))

    drop_if_exists(unique_index(:users, [:email], name: "users_unique_email_index"))

    drop(table(:users))
  end
end
