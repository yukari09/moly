defmodule Monorepo.Repo.Migrations.Initial do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users_profiles, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:user_id, :uuid, null: false)
      add(:username, :text, null: false)
      add(:name, :text)
      add(:profile_picture, :text)
      add(:first_name, :text)
      add(:last_name, :text)
      add(:bio, :text)
      add(:date_of_birth, :date)
      add(:gender, :text)
      add(:phone_number, :text)
      add(:address, :text)
      add(:social_links, :map)
      add(:is_active, :boolean, default: true)
      add(:last_login_at, :naive_datetime)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:users, primary_key: false) do
      add(:confirmed_at, :utc_datetime_usec)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:users_profiles) do
      modify(
        :user_id,
        references(:users,
          column: :id,
          name: "users_profiles_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:users_profiles, [:username],
             name: "users_profiles_unique_username_index"
           )

    alter table(:users) do
      add(:email, :citext, null: false)
      add(:hashed_password, :text)
      add(:role, :text, null: false, default: "user")
      add(:status, :text, null: false, default: "pending")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:jti, :text, null: false, primary_key: true)
      add(:subject, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:purpose, :text, null: false)
      add(:extra_data, :map)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:tags, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:tag_name, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:tags, [:tag_name], name: "tags_unique_tag_name_index")

    create table(:posts_tags, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:post_id, :uuid)
      add(:tag_id, :uuid)
    end

    create table(:posts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:posts_tags) do
      modify(
        :post_id,
        references(:posts,
          column: :id,
          name: "posts_tags_post_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :tag_id,
        references(:tags,
          column: :id,
          name: "posts_tags_tag_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:posts) do
      add(:title, :text, null: false)
      add(:subject, :text, null: false)
      add(:excerpt, :text, null: false)
      add(:post_status, :text, null: false, default: "draft")
      add(:post_type, :text, null: false, default: "post")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:category_id, :uuid)
      add(:user_id, :uuid)
    end

    create table(:post_metas, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:meta_key, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :post_id,
        references(:posts,
          column: :id,
          name: "post_metas_post_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create table(:categories, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:posts) do
      modify(
        :category_id,
        references(:categories,
          column: :id,
          name: "posts_category_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :user_id,
        references(:users, column: :id, name: "posts_user_id_fkey", type: :uuid, prefix: "public")
      )
    end

    create unique_index(:posts, [:title], name: "posts_unique_title_index")

    alter table(:categories) do
      add(:category_name, :text, null: false)
      add(:is_deleted, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:categories, [:category_name],
             name: "categories_unique_category_name_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:categories, [:category_name], name: "categories_unique_category_name_index")
    )

    alter table(:categories) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:is_deleted)
      remove(:category_name)
    end

    drop_if_exists(unique_index(:posts, [:title], name: "posts_unique_title_index"))

    drop(constraint(:posts, "posts_category_id_fkey"))

    drop(constraint(:posts, "posts_user_id_fkey"))

    alter table(:posts) do
      modify(:user_id, :uuid)
      modify(:category_id, :uuid)
    end

    drop(table(:categories))

    drop(constraint(:post_metas, "post_metas_post_id_fkey"))

    drop(table(:post_metas))

    alter table(:posts) do
      remove(:user_id)
      remove(:category_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:post_type)
      remove(:post_status)
      remove(:excerpt)
      remove(:subject)
      remove(:title)
    end

    drop(constraint(:posts_tags, "posts_tags_post_id_fkey"))

    drop(constraint(:posts_tags, "posts_tags_tag_id_fkey"))

    alter table(:posts_tags) do
      modify(:tag_id, :uuid)
      modify(:post_id, :uuid)
    end

    drop(table(:posts))

    drop(table(:posts_tags))

    drop_if_exists(unique_index(:tags, [:tag_name], name: "tags_unique_tag_name_index"))

    drop(table(:tags))

    drop(table(:tokens))

    drop_if_exists(unique_index(:users, [:email], name: "users_unique_email_index"))

    alter table(:users) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:status)
      remove(:role)
      remove(:hashed_password)
      remove(:email)
    end

    drop_if_exists(
      unique_index(:users_profiles, [:username], name: "users_profiles_unique_username_index")
    )

    drop(constraint(:users_profiles, "users_profiles_user_id_fkey"))

    alter table(:users_profiles) do
      modify(:user_id, :uuid)
    end

    drop(table(:users))

    drop(table(:users_profiles))
  end
end
