<.form phx-change={JS.dispatch("vaildateForm")} phx-submit="save">
<div class="mx-auto max-w-7xl px-4 sm:px-6 sm:pb-32 sm:pt-12  lg:px-8" >
  <div class="lg:text-4xl text-2xl pb-12 font-medium lg:font-normal border-b border-gray-900/10">Submit Competitive Products</div>
  <div class="space-y-12 mt-24">
    <div class="grid grid-cols-1 gap-x-8 gap-y-10 border-b border-gray-900/10 pb-12 md:grid-cols-3">
      <div>
        <h2 class="text-base/7 font-semibold text-gray-900">Alliance Program Information</h2>
        <p class="mt-1 text-sm/6 text-gray-600">Provide key details about the affiliate program.</p>
      </div>

      <div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 md:col-span-2">
        <div class="sm:col-span-4">
          <.input  label="Affiliate Program Name" placeholder="Affiliate Program Name"  field={@form[:post_title]} data-vaildator="require:string:length-5"/>
        </div>

        <div class="col-span-full">
          <.textarea  label="Description" placeholder="Description of affiliate program."  field={@form[:post_content]} data-vaildator="require:string:length-10"/>
          <p class="mt-3 text-sm/6 text-gray-600">Write a few sentences about this affiliate program.</p>
        </div>

        <div class="col-span-full">
          <.input  label="Tags" placeholder="Tags of affiliate program, tag1,tag2,..."  field={@form[:post_tags]} data-vaildator="require:list:length-1"/>
        </div>

      </div>
    </div>

    <div class="grid grid-cols-1 gap-x-8 gap-y-10 border-b border-gray-900/10 pb-12 md:grid-cols-3">
      <div>
        <div class="relative">
          <h2 class="text-base/7 font-semibold text-gray-900">
              Commission structure&nbsp;
          </h2>
        </div>
        <p class="mt-1 text-sm/6 text-gray-600">
            The information about the commission structure.<br/><.link class="text-gray-500 underline">How to write commission</.link>
        </p>
      </div>

      <div class="max-w-2xl md:col-span-2">
        <div class="text-right">
          <.link class="text-xs underline text-gray-500" phx-click={JS.dispatch("addNewCommssion")}>
          Add New
          </.link>
        </div>
        <div id="commission-container" class="grid grid-cols-1 gap-x-2 gap-y-8 sm:grid-cols-6 border-gray-900/10 border-b pb-8">
          <div class="sm:col-span-2" data-commision-i={0}>
            <.select label="Commission Type" field={@form[:post_meta]} data-i="0" data-j="0" field_subfix="[0][0][meta_value]" options={[{"bounty", "Fixed Bounty"},{"revenue_share", "Revenue Share"},{"hybrid", "Hybrid"}]} />
            <.input  class="hidden" field={@form[:post_meta]}  data-i="0" data-j="0" field_subfix="[0][0][meta_key]" value={:commission_type} />
          </div>
          <div class="sm:col-span-1" data-commision-i={0}>
            <.input label="Amount" type="number" field={@form[:post_meta]} data-i="0" data-j="1" field_subfix="[0][1][meta_value]" data-vaildator="require:integer" />
            <.input  class="hidden" field={@form[:post_meta]} data-i="0" data-j="1" field_subfix="[0][1][meta_key]" value={:commission_amount} />
          </div>
          <div class="sm:col-span-1" data-commision-i={0}>
            <.select label="Unit" field={@form[:post_meta]} data-i="0" data-j="2" field_subfix="[0][2][meta_value]" options={[{"USD", "$"},{"EUR", "€"},{"%", "%"}]} />
            <.input  class="hidden" field={@form[:post_meta]} data-i="0" data-j="2" field_subfix="[0][2][meta_key]" value={:unit} />
          </div>
          <div class="sm:col-span-2" data-commision-i={0}>
            <div class="flex items-center gap-0.5 w-full">
              <.input label="Notes" field={@form[:post_meta]} data-i="0" data-j="3" field_subfix="[0][3][meta_value]"  placeholder="Other information."/>
              <.input  class="hidden size-0 flex-1" field={@form[:post_meta]} data-i="0" data-j="3" field_subfix="[0][3][meta_key]" value={:notes} />
              <.icon name="hero-minus-solid" class="size-4.5 hidden text-gray-500 cursor-pointer" />
            </div>
          </div>
        </div> 
        <div class="grid grid-cols-1 gap-x-2 gap-y-8 sm:grid-cols-6 py-8 border-gray-900/10 border-b">
          <div class="sm:col-span-3">
            <.input label="Cookie Duration (days)" type="number" field={@form[:post_meta]} field_subfix="[4][meta_value]" data-vaildator="integer" />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[4][meta_key]" value={:cookie_duration} />
          </div>
          <div class="sm:col-span-3">
            <.input label="Duration Months" type="number" field={@form[:post_meta]} field_subfix="[5][meta_value]" data-vaildator="integer" />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[5][meta_key]" value={:duration_months} />
          </div>
        </div> 
        <div class="grid grid-cols-1 gap-x-2 gap-y-8 sm:grid-cols-6 mt-8">
          <div class="sm:col-span-2">
            <.input label="Payment Method" placeholder="Paypal,Bank Transfer" field={@form[:post_meta]} field_subfix="[6][meta_value]" data-vaildator="require:list:length-1" />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[6][meta_key]" value={:payment_method} />
          </div>
          <div class="sm:col-span-2">
            <.input label="Min Payout Threshold" type="number" field={@form[:post_meta]} field_subfix="[7][meta_value]" data-vaildator="require:integer" />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[7][meta_key]" value={:min_payout_threshold} />
          </div>
          <div class="sm:col-span-1">
            <.select label="Payment Cycle" field={@form[:post_meta]} field_subfix="[8][meta_value]" options={[{"monthly", "Monthly"}, {"semi-monthly", "Semi-Monthly"}, {"weekly", "Weekly"}, {"quarterly", "Quarterly"}, {"bi-annually", "Bi-Annually"}, {"annually", "Annually"}, {"on-demand", "On-Demand"}, {"net-30", "Net 30"}, {"net-60", "Net 60"}]} />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[8][meta_key]" value={:payment_cycle} />
          </div>
          <div class="sm:col-span-1">
            <.select label="Currency" field={@form[:post_meta]} field_subfix="[9][meta_value]" options={[{"USD", "$"},{"EUR", "€"}]}  />
            <.input  class="hidden" field={@form[:post_meta]} field_subfix="[9][meta_key]" value={:currency} />
          </div>
        </div> 
      </div>
    </div>

    <div class="grid grid-cols-1 gap-x-8 gap-y-10 border-b border-gray-900/10 pb-12 md:grid-cols-3">
      <div>
        <h2 class="text-base/7 font-semibold text-gray-900">Resource</h2>
        <p class="mt-1 text-sm/6 text-gray-600">Resource of about this affiliate program.</p>
      </div>
      <div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 md:col-span-2">
        <div class="sm:col-span-4">
          <.input label="Affiliate Program Link" placeholder="Affiliate program link begin with http(s)" field={@form[:post_meta]} field_subfix="[10][meta_value]" data-vaildator="require:url" />
          <.input  class="hidden" field={@form[:post_meta]} field_subfix="[10][meta_key]" value={:affiliate_program_link} />
        </div>
        <div class="sm:col-span-2">
          <.input label="Applicable Region" field={@form[:post_meta]} field_subfix="[11][meta_value]" placeholder="Global,USA,UK" data-vaildator="require:list:length-1" />
          <.input  class="hidden" field={@form[:post_meta]} field_subfix="[11][meta_key]" value={:region} />
        </div>
        <div class="col-span-full">
          <.select label="Industry" field={@form[:categories]} field_subfix="[0]" options={Enum.map(@industries, &({&1.id, &1.term.name}))}/>
        </div>
        <div class="col-span-full">
          <label for="cover-photo" class="block text-sm/6 font-medium text-gray-900">Affiliate program screenshot</label>
          <div id="upload-image-wrap" phx-mounted={JS.dispatch("uploadImageDropDrag")} class="mt-2 relative rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
            <div id="upload-image-default-layer" class="flex flex-col text-center">
              <.icon name="hero-photo" class="mx-auto size-12 text-gray-300"/>
              <div class="mt-4 flex text-sm/6 text-gray-600 mx-auto">
                <label for={@uploads.media.ref} class="relative cursor-pointer rounded-md bg-white font-semibold text-green-600 focus-within:ring-2 focus-within:ring-green-600 focus-within:ring-offset-2 focus-within:outline-hidden hover:text-green-500">
                  <span>Upload a file</span>
                  <.live_file_input class="hidden" upload={@uploads.media} data-vaildator="require:file:length-1"/>
                </label>
                <p class="pl-1">or drag and drop</p>
              </div>
              <p class="text-xs/5 text-gray-600">PNG, JPG, Webp up to 4MB</p>
            </div>
            <div id="remove-preview-btn" class="absolute right-0 top-0 mr-1 mt-1 invisible">
              <button type="button"  class="bg-white shadow rounded-full text-gray-500 p-1 cursor-pointer">
              <Lucideicons.x class="size-4" />
              </button>
            </div> 
          </div>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 gap-x-8 gap-y-10 border-b border-gray-900/10 pb-12 md:grid-cols-3">
      <div>
        <h2 class="text-base/7 font-semibold text-gray-900">Signup Requirements</h2>
        <p class="mt-1 text-sm/6 text-gray-600">Signup Requirements.</p>
      </div>
      <div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 md:col-span-2">
        <div class="col-span-full">
          <.textarea placeholder="Requires an active website with tech or hosting-related content, no minimum traffic, application review needed." rows="5" phx-change={JS.dispatch("autoResizeTextarea")}  class="w-full" label="Signup Requirements"  field={@form[:post_meta]} field_subfix="[12][meta_value]" data-vaildator="require:string:length-20"/>
          <.input  class="hidden" field={@form[:post_meta]} field_subfix="[12][meta_key]" value={:affiliate_signup_requirements} />
        </div>
      </div>
    </div>
  </div>

  <div class="mt-6 flex items-center justify-end gap-x-6">
    <button type="button"  class="text-sm/6 font-semibold text-gray-900">Cancel</button>
    <.button class="pointer-events-none opacity-30">Save</.button>
  </div>
</div>
</.form>

<script>
  let counter = 12
  window.addEventListener("addNewCommssion", event => {
    document.querySelectorAll("div[data-commision-i='0']").forEach((div, index) => {
      const clonedDiv = div.cloneNode(true);
      clonedDiv.querySelector("label").remove();
      let dataCommssionIndex = `cloned-${counter + 1}`
      clonedDiv.setAttribute("data-commision-i", dataCommssionIndex);
      clonedDiv.querySelector("[data-phx-id] div").classList.remove("mt-2")
      clonedDiv.querySelectorAll("input,select").forEach((input, index) => {
        let i = input.getAttribute("data-i")
        let j = input.getAttribute("data-j")
        let newI = parseInt(i) + 1
        const oldInputName = input.getAttribute("name")
        const oldInputId = input.getAttribute("id")
        let newInputName = oldInputName.replace(/\[\d+\]\[\d+\]/, `[${newI}][${j}]`)
        let newInputId = oldInputId.replace(/\d+__\d+/, `${newI}__${j}`)
        input.setAttribute("id", newInputId)
        input.setAttribute("name", newInputName)
        document.querySelector(`#${oldInputId}`).setAttribute("data-i", newI)
      })
      const minusIcon = clonedDiv.querySelector(".hero-minus-solid");
      if(minusIcon){
        minusIcon.classList.remove("hidden")
        minusIcon.addEventListener("click", event => {
          document.querySelectorAll(`[data-commision-i='${dataCommssionIndex}']`).forEach(e => e.remove())
        })
      }
      div.parentNode.appendChild(clonedDiv);
    });
    counter++
  });
  window.addEventListener("uploadImageDropDrag", (event) => {
    const dropArea = document.getElementById("upload-image-wrap");
    const fileInput = document.querySelector("[name='media']")
    const removePreviewBtn = document.getElementById("remove-preview-btn");
    const uploadImageDefaultLayer = document.querySelector("#upload-image-default-layer")

    const previewImage = document.createElement("img");
    previewImage.classList.add("object-cover", "p-2");
    previewImage.style.display = "none";

    dropArea.appendChild(previewImage); 

    dropArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      dropArea.classList.add("outline-green-500","outline-1");
    });

    dropArea.addEventListener("dragleave", () => {
      dropArea.classList.remove("outline-green-500","outline-1");
    });

    dropArea.addEventListener("drop", (e) => {
      e.preventDefault();
      dropArea.classList.remove("outline-green-500","outline-1");
      const file = e.dataTransfer.files[0];
      handleFile(file);
    });

    fileInput.addEventListener("change", (e) => {
      const file = e.target.files[0];
      handleFile(file);
    });

    function handleFile(file) {
      if (!file) return;

      const validTypes = ["image/png", "image/jpeg", "image/webp"];
      if (!validTypes.includes(file.type)) {
        alert("Only PNG, JPG, and Webp files are allowed.");
        return;
      }

      if (file.size > 4 * 1024 * 1024) {
        alert("File size should not exceed 4MB.");
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        previewImage.src = e.target.result;
        previewImage.style.display = "block";
        uploadImageDefaultLayer.classList.add("hidden")
        dropArea.classList.remove("px-6","py-10")
        removePreviewBtn.classList.remove("invisible")
      };
      reader.readAsDataURL(file);
    }
    
    removePreviewBtn.querySelector("button").addEventListener("click", event => {
      previewImage.src = "";
      previewImage.style.display = "none";
      removePreviewBtn.classList.add("invisible")
      uploadImageDefaultLayer.classList.remove("hidden");
      dropArea.classList.add("px-6", "py-10");
      fileInput.value = "";
    }) 
  });
  window.addEventListener("autoResizeTextarea", event => {
    const textarea = event.target;
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
  })
  window.addEventListener("vaildateForm", event => {
    const els = document.querySelectorAll("[data-vaildator]")
    els.forEach(e => {
      console.log(e.getAttribute("data-vaildator"))
    })
  })

  const countWords = (str) => str.trim().split(/\s+/).length;
  const validateField = (value, rule) => {
    if (!rule) return true; 
    const rules = rule.split(":");

    const isRequired = rules[0] === "require";
    const type = isRequired ? rules[1] : rules[0];
    const hasLengthRule = rules.some(r => r.startsWith("length-"));
    const getExpectedLength = () => parseInt(rules.find(r => r.startsWith("length-")).split("-")[1], 10);

    switch (type) {
        case "string":
            if (typeof value !== "string") return false;
            const wordCount = countWords(value);
            return hasLengthRule ? wordCount >= getExpectedLength() : wordCount > 0;

        case "integer":
            const intValue = parseFloat(value);
            return !isNaN(intValue);

        case "list":
            let listValue = Array.isArray(value) ? value : (typeof value === "string" ? value.split(",") : []);
            return hasLengthRule ? listValue.length >= getExpectedLength() : listValue.length > 0;

        case "file":
            if (!(value instanceof FileList)) return false;
            return hasLengthRule ? value.length >= getExpectedLength() : value.length > 0;

        case "url":
            try {
                new URL(value);
                return true;
            } catch (e) {
                return false;
            }

        default:
            return false;
    }
  }

 
</script>


 