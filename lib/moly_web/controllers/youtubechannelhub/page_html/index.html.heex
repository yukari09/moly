<!-- Find YouTube Thumbnail - DaisyUI 5 Version -->
<style>
    /* Essential custom CSS - Complex gradients and animation effects */
    :root {
        --red: #ff2d55;
        --red-light: #ff6b8a;
        --red-dark: #e60026;
        --blue: #007aff;
        --purple: #5856d6;
        --green: #30d158;
        --orange: #ff9500;
    }

    /* Complex gradient backgrounds - Cannot be implemented directly with DaisyUI */
    .hero-bg {
        background: 
            linear-gradient(135deg, 
                rgba(255, 45, 85, 0.03) 0%, 
                rgba(88, 86, 214, 0.025) 50%, 
                rgba(255, 149, 0, 0.02) 100%
            ),
            #fafbfc;
    }
    
    .hero-bg::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: 
            radial-gradient(circle at 30% 30%, rgba(255, 45, 85, 0.015) 0%, transparent 70%),
            radial-gradient(circle at 70% 70%, rgba(88, 86, 214, 0.01) 0%, transparent 70%);
        pointer-events: none;
    }

    .section-bg-secondary {
        background: 
            radial-gradient(ellipse 800px 500px at 30% 70%, rgba(48, 209, 88, 0.025) 0%, transparent 60%),
            radial-gradient(ellipse 500px 800px at 70% 30%, rgba(255, 45, 85, 0.02) 0%, transparent 60%),
            linear-gradient(135deg, #f8fafc 0%, rgba(248, 250, 252, 0.9) 50%, #f8fafc 100%);
    }

    .section-bg-accent {
        background: 
            radial-gradient(ellipse 900px 700px at 40% 40%, rgba(0, 122, 255, 0.025) 0%, transparent 60%),
            radial-gradient(ellipse 700px 900px at 60% 60%, rgba(255, 149, 0, 0.02) 0%, transparent 60%),
            linear-gradient(45deg, #ffffff 0%, rgba(252, 254, 255, 0.9) 50%, #ffffff 100%);
    }

    /* Gradient text effects */
    .gradient-youtube {
        background: linear-gradient(135deg, var(--red) 0%, var(--orange) 40%, var(--red) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    /* Organic rounded corners */
    .organic-rounded {
        border-radius: 32px 36px 28px 40px;
    }

    .organic-rounded-sm {
        border-radius: 18px 22px 16px 24px;
    }

    .organic-rounded-lg {
        border-radius: 24px 28px 20px 32px;
    }

    /* Status indicator glow effects */
    .status-success {
        background: radial-gradient(circle, #66eb7a 0%, #30d158 100%);
        box-shadow: 0 0 16px rgba(48, 209, 88, 0.4), 0 0 4px rgba(48, 209, 88, 0.6);
    }

    .status-error {
        background: radial-gradient(circle, #ff6b8a 0%, #ff2d55 100%);
        box-shadow: 0 0 16px rgba(255, 45, 85, 0.4), 0 0 4px rgba(255, 45, 85, 0.6);
    }

    /* Feature icon gradient backgrounds */
    .feature-speed {
        background: linear-gradient(145deg, var(--orange) 0%, #e6800e 100%);
        box-shadow: 0 8px 24px rgba(255, 149, 0, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    .feature-free {
        background: linear-gradient(145deg, var(--green) 0%, #28a745 100%);
        box-shadow: 0 8px 24px rgba(48, 209, 88, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    .feature-quality {
        background: linear-gradient(145deg, var(--purple) 0%, #3634a3 100%);
        box-shadow: 0 8px 24px rgba(88, 86, 214, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    .usecase-content {
        background: linear-gradient(145deg, var(--red) 0%, var(--red-dark) 100%);
        box-shadow: 0 8px 24px rgba(255, 45, 85, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    .usecase-marketing {
        background: linear-gradient(145deg, var(--blue) 0%, #0051cc 100%);
        box-shadow: 0 8px 24px rgba(0, 122, 255, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    .usecase-media {
        background: linear-gradient(145deg, var(--purple) 0%, #3634a3 100%);
        box-shadow: 0 8px 24px rgba(88, 86, 214, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

 

    /* Notification system special effects */
    .notification {
        background: 
            linear-gradient(145deg, #ffffff 0%, rgba(248, 255, 252, 0.95) 100%),
            radial-gradient(ellipse 200px 100px at 80% 20%, rgba(48, 209, 88, 0.08) 0%, transparent 60%);
        border: 2px solid rgba(48, 209, 88, 0.15);
        backdrop-filter: blur(8px);
    }

    .notification::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        width: 6px;
        background: linear-gradient(180deg, var(--green) 0%, #28a745 100%);
        border-radius: 0 3px 3px 0;
        box-shadow: 0 0 8px rgba(48, 209, 88, 0.4);
    }

    .notification-icon {
        background: linear-gradient(145deg, var(--green) 0%, #28a745 100%);
        box-shadow: 0 6px 16px rgba(48, 209, 88, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    /* Preserved animations */
    @keyframes slideIn {
        from { opacity: 0; transform: translateX(100%) scale(0.95); }
        to { opacity: 1; transform: translateX(0) scale(1); }
    }

    @keyframes fadeInUp {
        from { opacity: 0; transform: translateY(40px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideInFromLeft {
        from { opacity: 0; transform: translateX(-60px); }
        to { opacity: 1; transform: translateX(0); }
    }

    @keyframes slideInFromRight {
        from { opacity: 0; transform: translateX(60px); }
        to { opacity: 1; transform: translateX(0); }
    }

    @keyframes scaleIn {
        from { opacity: 0; transform: scale(0.8); }
        to { opacity: 1; transform: scale(1); }
    }

    .animate-slide-in { animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1); }
    .animate-fade-up { animation: fadeInUp 0.8s ease-out forwards; }
    .animate-slide-left { animation: slideInFromLeft 0.8s ease-out forwards; }
    .animate-slide-right { animation: slideInFromRight 0.8s ease-out forwards; }
    .animate-scale { animation: scaleIn 0.8s ease-out forwards; }

    /* Scroll animations */
    .animate-on-scroll {
        opacity: 0;
        transition: opacity 0.6s ease, transform 0.6s ease;
        will-change: transform, opacity;
    }

    /* Performance optimization */
    .performance-optimized {
        will-change: transform;
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        perspective: 1000px;
    }
</style>

<div 
    x-data="{
        videoUrl: '',
        showResults: false,
        showError: false,
        errorMessage: '',
        videoId: null,
        isLoading: false,
        animatedElements: new Set(),
        performanceMode: true,
        
        initScrollAnimations() {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'none';
                        observer.unobserve(entry.target);
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '50px'
            });
            
            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });
        },
        thumbnailOptions: [],
        allQualityOptions: [
            { 
                name: '4K Ultra HD', 
                urlSuffix: 'maxresdefault.jpg',
                description: 'Maximum resolution available (up to 4K)',
                badge: '4K',
                badgeClass: ' badge-accent',
                priority: 1
            },
            { 
                name: 'High Quality', 
                urlSuffix: 'hqdefault.jpg',
                description: 'Perfect for web and social media',
                badge: 'HQ',
                badgeClass: 'badge-secondary',
                priority: 2
            },
            { 
                name: 'Standard', 
                urlSuffix: 'sddefault.jpg',
                description: 'Great balance of size and quality',
                badge: 'SD',
                badgeClass: 'badge-primary',
                priority: 3
            },
            { 
                name: 'Medium', 
                urlSuffix: 'mqdefault.jpg',
                description: 'Fast loading, smaller file size',
                badge: 'MQ',
                badgeClass: 'badge-neutral',
                priority: 4
            },
            { 
                name: 'Default', 
                urlSuffix: 'default.jpg',
                description: 'Compact thumbnail for quick previews',
                badge: 'SM',
                badgeClass: 'badge-info',
                priority: 5
            }
        ],
        
        async getImageDimensions(url) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = function() {
                    resolve({
                        width: this.width,
                        height: this.height
                    });
                };
                img.onerror = reject;
                img.src = url;
            });
        },
        extractVideoId(url) {
            if (!url) return null;
            
            url = url.trim().replace(/^[@#*\-\s]+/, '');
            
            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                if (url.startsWith('www.') || url.startsWith('youtube.com') || url.startsWith('youtu.be')) {
                    url = 'https://' + url;
                }
            }
            
            console.log('Cleaned URL:', url);
            
            if (url.includes('<iframe') && url.includes('youtube.com/embed/')) {
                const iframeMatch = url.match(/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/);
                return iframeMatch ? iframeMatch[1] : null;
            }
            
            if (!url.includes('youtube.com') && !url.includes('youtu.be')) {
                return null;
            }
            
            const patterns = [
                /(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?.*[&?]v=([a-zA-Z0-9_-]{11})/,
                /(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
                /(?:https?:\/\/)?youtu\.be\/([a-zA-Z0-9_-]{11})/,
                /(?:https?:\/\/)?(?:www\.)?youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
                /(?:https?:\/\/)?youtu\.be\/([a-zA-Z0-9_-]{11})\?.*$/
            ];
            
            for (let pattern of patterns) {
                const match = url.match(pattern);
                if (match && match[1]) {
                    console.log('Extracted video ID:', match[1]);
                    return match[1];
                }
            }
            console.log('No video ID found');
            return null;
        },
        
        isValidYouTubeUrl(url) {
            if (!url || url.trim().length === 0) return false;
            
            if (url.includes('<iframe') && url.includes('youtube.com/embed/')) {
                const iframeMatch = url.match(/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/);
                return iframeMatch !== null;
            }
            
            if (!url.includes('youtube.com') && !url.includes('youtu.be')) {
                return false;
            }
            
            return this.extractVideoId(url) !== null;
        },
        showErrorMessage(message) {
            this.errorMessage = message;
            this.showError = true;
            
            setTimeout(() => {
                this.showError = false;
            }, 5000);
        },
        async extractThumbnails() {
            const url = this.videoUrl.trim();
            
            if (!url) {
                this.showErrorMessage('Please enter a YouTube video URL');
                return;
            }
            
            if (!this.isValidYouTubeUrl(url)) {
                this.showErrorMessage('Please enter a valid YouTube URL. Supported formats:\n• https://www.youtube.com/watch?v=VIDEO_ID\n• https://youtu.be/VIDEO_ID\n• YouTube embed code URL');
                return;
            }
            
            const videoId = this.extractVideoId(url);
            console.log('Extracted video ID:', videoId);
            
            if (!videoId) {
                this.showErrorMessage('Unable to extract video ID from this URL, please check the URL format');
                return;
            }
            
            this.isLoading = true;
            this.showError = false;
            this.showResults = false;
            this.thumbnailOptions = [];
            
            console.log('Processing video ID:', videoId);
            
            try {
                const defaultOption = this.allQualityOptions.find(opt => opt.urlSuffix === 'default.jpg');
                const defaultUrl = `https://img.youtube.com/vi/${videoId}/${defaultOption.urlSuffix}`;
                
                const defaultExists = await this.checkImageExists(defaultUrl);
                if (!defaultExists) {
                    throw new Error('Video not found or thumbnails not available');
                }
                
                this.videoId = videoId;
                this.showResults = true;
                this.isLoading = false;
                
                try {
                    const dimensions = await this.getImageDimensions(defaultUrl);
                    this.thumbnailOptions.push({
                        ...defaultOption,
                        imageUrl: defaultUrl,
                        size: `${dimensions.width}×${dimensions.height}`,
                        loaded: true
                    });
                } catch (error) {
                    console.error('Error getting dimensions for default thumbnail:', error);
                    this.thumbnailOptions.push({
                        ...defaultOption,
                        imageUrl: defaultUrl,
                        loaded: true
                    });
                }
                
                this.$nextTick(() => {
                    const element = document.getElementById('results');
                    if (element) {
                        element.scrollIntoView({ behavior: 'smooth' });
                    }
                });
                
                this.fetchOtherQualities(videoId);
                
            } catch (error) {
                this.isLoading = false;
                this.showErrorMessage('Failed to load video thumbnails. Please check if the video exists and is public.');
                console.error('Error fetching thumbnails:', error);
            }
        },
        async downloadThumbnail(urlSuffix, optionName) {
            const url = `https://img.youtube.com/vi/${this.videoId}/${urlSuffix}`;
            const filename = `${this.videoId}_${optionName.replace(/\s+/g, '_')}.jpg`;
            
            try {
                const response = await fetch(url);
                const blob = await response.blob();
                
                const blobUrl = window.URL.createObjectURL(blob);
                
                const link = document.createElement('a');
                link.href = blobUrl;
                link.download = filename;
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                window.URL.revokeObjectURL(blobUrl);
                
                this.$dispatch('notify', {
                    message: `${optionName} downloaded successfully!`
                });
            } catch (error) {
                console.error('Download failed:', error);
                const link = document.createElement('a');
                link.href = url;
                link.download = filename;
                link.target = '_blank';
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.$dispatch('notify', {
                    message: `${optionName} download started (opened in new tab)`
                });
            }
        },
        copyToClipboard(text) {
            navigator.clipboard.writeText(text);
            this.$dispatch('notify', {
                message: 'URL copied to clipboard!'
            });
        },
        
        async checkImageExists(url) {
            try {
                const response = await fetch(url, { method: 'HEAD' });
                return response.ok && response.status !== 404;
            } catch (error) {
                console.error('Error checking image:', error);
                return false;
            }
        },
        
        async fetchOtherQualities(videoId) {
            const otherQualities = this.allQualityOptions
                .filter(opt => opt.urlSuffix !== 'default.jpg')
                .sort((a, b) => a.priority - b.priority);
            
            for (const option of otherQualities) {
                try {
                    const url = `https://img.youtube.com/vi/${videoId}/${option.urlSuffix}`;
                    const exists = await this.checkImageExists(url);
                    
                    if (exists) {
                        try {
                            const dimensions = await this.getImageDimensions(url);
                            
                            this.thumbnailOptions.push({
                                ...option,
                                imageUrl: url,
                                size: `${dimensions.width}×${dimensions.height}`,
                                loaded: true
                            });
                        } catch (error) {
                            console.error(`Error getting dimensions for ${option.name}:`, error);
                        }
                        console.log(`Added ${option.name} thumbnail`);
                    } else {
                        console.log(`${option.name} thumbnail not available`);
                    }
                } catch (error) {
                    console.error(`Error fetching ${option.name}:`, error);
                }
                
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            
            console.log('Finished fetching all available thumbnails');
        },
        
        handleImageError(imgElement, originalSuffix) {
            const fallbackOrder = [
                'maxresdefault.jpg',
                'hqdefault.jpg',
                'mqdefault.jpg',
                'default.jpg'
            ];
            
            const currentIndex = fallbackOrder.indexOf(originalSuffix);
            const nextIndex = currentIndex + 1;
            
            if (nextIndex < fallbackOrder.length) {
                const nextSuffix = fallbackOrder[nextIndex];
                const nextUrl = `https://img.youtube.com/vi/${this.videoId}/${nextSuffix}`;
                imgElement.src = nextUrl;
            } else {
                this.showImagePlaceholder(imgElement);
            }
        },
        
        showImagePlaceholder(imgElement) {
            imgElement.style.display = 'none';
            const container = imgElement.parentElement;
            
            if (!container.querySelector('.thumbnail-placeholder')) {
                const placeholder = document.createElement('div');
                placeholder.className = 'thumbnail-placeholder w-full aspect-video bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center rounded-xl border-2 border-dashed border-gray-300 text-gray-500 text-sm font-medium';
                placeholder.textContent = 'Thumbnail unavailable';
                container.appendChild(placeholder);
            }
        }
    }"
    x-init="initScrollAnimations()"
    class="min-h-screen bg-base-100"
>
    <!-- Hero Section -->
    <section class="hero hero-bg relative min-h-screen">
        <div class="hero-content text-center max-w-7xl px-6 lg:px-8 py-12 lg:py-16">
            <div class="max-w-4xl">
                
                <!-- YouTube Icon -->
                <div class="flex items-center justify-center mb-12">
                    <div class="w-20 h-20 organic-rounded flex items-center justify-center shadow-xl shadow-error/30 performance-optimized" style="background: linear-gradient(135deg, #ff2d55 0%, #e60026 100%);">
                        <svg class="w-10 h-10 text-white drop-shadow-lg" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M25.5 22.8C25.5 20.3 27.3 18.2 29.7 17.8C45.8 15.2 54.2 15.2 70.3 17.8C72.7 18.2 74.5 20.3 74.5 22.8V77.2C74.5 79.7 72.7 81.8 70.3 82.2C54.2 84.8 45.8 84.8 29.7 82.2C27.3 81.8 25.5 79.7 25.5 77.2V22.8Z" fill="white" opacity="0.9"/>
                            <path d="M42.2 32.5C41.1 31.8 39.6 32.6 39.6 33.9V66.1C39.6 67.4 41.1 68.2 42.2 67.5L67.8 51.4C68.7 50.8 68.7 49.2 67.8 48.6L42.2 32.5Z" fill="url(#playGradient)"/>
                            <path d="M30.5 25.2C30.5 23.4 31.9 22 33.7 22H66.3C68.1 22 69.5 23.4 69.5 25.2C69.5 26.1 68.8 26.8 67.9 26.8H32.1C31.2 26.8 30.5 26.1 30.5 25.2Z" fill="white" opacity="0.3"/>
                            <defs>
                                <linearGradient id="playGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" style="stop-color:#ff2d55;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#e60026;stop-opacity:1" />
                                </linearGradient>
                            </defs>
                        </svg>
                    </div>
                </div>
                
                <!-- Title -->
                <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold mb-6 gradient-youtube animate-on-scroll" data-animate="fade-up">
                    Find YouTube Thumbnail
                </h1>
                
                <!-- Subtitle -->
                <p class="text-base lg:text-xl text-base-content/50  max-w-3xl mx-auto mb-16 animate-on-scroll" data-animate="fade-up" style="animation-delay: 0.2s;">
                    Extract high-quality thumbnails from any YouTube video in seconds. 
                    Professional tools for content creators, bloggers, and digital marketers.
                </p>
                
                <!-- Main Card -->
                <div class="max-w-2xl mx-auto animate-on-scroll border-base-content/10" data-animate="scale" style="animation-delay: 0.4s;">
                    <div class="card bg-base-100 shadow-xl organic-rounded">
                        <div class="card-body p-12">
                            
                            <!-- Header -->
                            <div class="text-center mb-8">
                                <h2 class="card-title text-2xl justify-center mb-4">Ready to extract?</h2>
                                <p class="text-base text-base-content/50">
                                    Paste any YouTube video URL below to get started. 
                                    Choose from multiple quality options to match your needs.
                                </p>
                            </div>
                            
                            <!-- Input Section -->
                            <div class="form-control w-full">
                                <div class="relative">
                                    <input 
                                        type="url" 
                                        x-model="videoUrl"
                                        @keyup.enter="extractThumbnails()"
                                        placeholder="https://www.youtube.com/watch?v=miYfKfuMX7M"
                                        class="w-full text-lg pr-12 px-6 py-4 border-base-200 rounded-full border-1 bg-base-200 transition-all duration-100 focus:bg-base-100 focus:border-base-200  focus:outline-none hover:bg-base-200/60  placeholder-base-300 focus:placeholder-base-100"
                                    />
                                    <!-- Status Indicator -->
                                    <div 
                                         x-show="videoUrl.length > 0"
                                        x-transition:enter="transition ease-out duration-300"
                                        x-transition:enter-start="opacity-0 scale-0"
                                        x-transition:enter-end="opacity-1 scale-1"
                                        class="absolute right-4 top-1/2 transform -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 z-10"
                                        x-bind:class="isValidYouTubeUrl(videoUrl) ? 'status-success' : 'status-error'"
                                    ></div>
                                </div>
                                
                                <!-- Validation Error -->
                                <div 
                                    x-show="videoUrl.length > 0 && !isValidYouTubeUrl(videoUrl)" 
                                    x-transition:enter="transition ease-out duration-300"
                                    x-transition:enter-start="opacity-0 transform translate-y-2"
                                    x-transition:enter-end="opacity-1 transform translate-y-0"
                                    class="mt-3"
                                >
                                    <div class="alert alert-error alert-soft">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        <div>
                                            <div class="font-bold">Invalid YouTube URL</div>
                                            <div class="text-xs">Please enter a valid YouTube link or embed code</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Extract Button -->
                            <div class="card-actions justify-stretch mt-8">
                                <button 
                                    class="btn bg-[#ff2d55] text-white btn-lg w-full rounded-full btn-soft bg-red"
                                     
                                    @click="extractThumbnails()" 
                                    x-bind:disabled="isLoading || !isValidYouTubeUrl(videoUrl)"
                                >
                                    <span x-show="!isLoading" class="flex items-center gap-3">
                                        <Lucideicons.download class="size-5" />
                                        Extract All Thumbnails
                                    </span>
                                    <span x-show="isLoading">Extracting...</span>
                                </button>
                            </div>
                            
                            <!-- Error State -->
                            <div 
                                x-show="showError" 
                                x-transition:enter="transition ease-out duration-300"
                                x-transition:enter-start="opacity-0 scale-95"
                                x-transition:enter-end="opacity-1 scale-100"
                                class="mt-6"
                            >
                                <div class="alert alert-error">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                                    </svg>
                                    <div>
                                        <h3 class="font-bold">Error</h3>
                                        <div class="text-xs" x-text="errorMessage"></div>
                                    </div>
                                </div>
                            </div>
                            
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </section>

    <!-- Results Section -->
    <section 
        x-show="showResults" 
        x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="opacity-0 transform translate-y-8"
        x-transition:enter-end="opacity-1 transform translate-y-0"
        class="py-20 lg:py-32 section-bg-secondary relative" 
        id="results"
    >
        <div class="max-w-7xl mx-auto px-6 lg:px-8">
            
            <!-- Section Header -->
            <div class="text-center mb-16 animate-on-scroll   rounded-3xl p-8 mx-auto max-w-4xl" data-animate="fade-up">
                <div class="flex items-center justify-center gap-3 mb-6">
                    <div class="w-8 h-8 rounded-xl flex items-center justify-center feature-quality performance-optimized">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                    </div>
                    <h2 class="text-3xl lg:text-4xl font-bold">Choose Your Quality</h2>
                </div>
                <p class="text-xl text-base-content/60 max-w-2xl mx-auto">
                    Select the perfect resolution for your needs—from web-ready formats to ultra-high definition.
                </p>
            </div>

            <!-- Thumbnails Grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4   max-w-7xl mx-auto">
                <template x-for="(option, index) in thumbnailOptions" x-bind:key="option.name">
                    <div 
                        class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1"
                        x-transition:enter="transition ease-out duration-500"
                        x-transition:enter-start="opacity-0 transform translate-y-8"
                        x-transition:enter-end="opacity-1 transform translate-y-0"
                        x-bind:style="`transition-delay: ${index * 150}ms;`"
                    >
                        <!-- Image Preview -->
                        <figure class="relative">
                            <img 
                                x-bind:src="videoId ? `https://img.youtube.com/vi/${videoId}/${option.urlSuffix}` : ''"
                                x-bind:alt="option.name"
                                class="w-full aspect-video object-cover transition-opacity duration-300"
                                @error="handleImageError($el, option.urlSuffix)"
                                @load="$el.style.opacity = '1'"
                                style="opacity: 0;"
                            />
                            <!-- Quality Badge -->
                            <div class="absolute top-3 right-3">
                                <div 
                                    class="badge badge-sm md:badge-lg rounded-br-lg rounded-tl-lg"
                                    x-bind:class="option.badgeClass" 
                                    x-text="option.badge"
                                ></div>
                            </div>
                        </figure>

                        <!-- Card Content -->
                        <div class="card-body p-6">
                            <!-- Info -->
                            <div class="flex items-center justify-between mb-2">
                                <h3 class="card-title text-lg" x-text="option.name"></h3>
                                <div class="badge badge-neutral badge-sm">JPG</div>
                            </div>
                            <p class="text-sm text-base-content/60 mb-3" x-text="option.description"></p>
                            <div class="flex items-center gap-2 text-sm text-base-content/50 mb-4">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
                                </svg>
                                <span x-text="option.size || 'Loading...'" class="font-medium"></span>
                            </div>

                            <!-- Actions -->
                            <div class="card-actions flex-col gap-2">
                                <button 
                                    class="btn bg-[#ff2d55] w-full text-white rounded-full"
                                    @click="downloadThumbnail(option.urlSuffix, option.name)"
                                >
                                    <Lucideicons.download class="size-5" />
                                    Download
                                </button>
                                <button 
                                    class="btn  btn-soft w-full rounded-full"
                                    @click="copyToClipboard(`https://img.youtube.com/vi/${videoId}/${option.urlSuffix}`)"
                                >
                                    <Lucideicons.copy class="size-4" />
                                    Copy URL
                                </button>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
            
        </div>
    </section>

    <!-- Features Section -->
    <section class="py-20 lg:py-32 section-bg-accent relative">
        <div class="max-w-7xl mx-auto px-6 lg:px-8">
            
            <!-- Header -->
            <div class="text-center mb-16 animate-on-scroll" data-animate="fade-up">
                <h2 class="text-3xl lg:text-4xl font-bold mb-6">Why Choose Our Tool</h2>
                <p class="text-xl text-base-content/60 max-w-2xl mx-auto">
                    Professional-grade thumbnail extraction trusted by creators worldwide
                </p>
            </div>
            
            <!-- Features Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12 max-w-4xl mx-auto">
                <div class="card bg-base-100 shadow-lg text-center animate-on-scroll" data-animate="slide-left">
                    <div class="card-body items-center text-center">
                        <div class="flex items-center justify-center mb-6">
                            <div class="w-16 h-16 feature-speed organic-rounded-sm flex items-center justify-center performance-optimized">
                                <svg class="w-8 h-8 text-white drop-shadow-lg" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M45.2 12.8C46.1 11.2 48.5 11.7 48.8 13.6L52.3 35.4C52.4 36.2 53.1 36.8 53.9 36.7L72.8 34.9C74.7 34.7 75.8 37.1 74.4 38.6L32.6 82.4C31.1 84.0 28.6 82.1 29.7 80.1L42.8 56.2C43.3 55.2 42.9 54.0 41.8 53.6L22.4 45.8C20.9 45.2 20.8 43.0 22.2 42.2L45.2 12.8Z" fill="white"/>
                                    <path d="M35.5 28.3C35.5 27.1 36.5 26.1 37.7 26.1C46.2 26.1 52.8 32.7 52.8 41.2C52.8 42.4 51.8 43.4 50.6 43.4C49.4 43.4 48.4 42.4 48.4 41.2C48.4 35.1 43.8 30.5 37.7 30.5C36.5 30.5 35.5 29.5 35.5 28.3Z" fill="white" opacity="0.6"/>
                                    <path d="M58.2 65.8C58.2 64.6 59.2 63.6 60.4 63.6C65.9 63.6 70.3 59.2 70.3 53.7C70.3 52.5 71.3 51.5 72.5 51.5C73.7 51.5 74.7 52.5 74.7 53.7C74.7 61.6 68.3 68.0 60.4 68.0C59.2 68.0 58.2 67.0 58.2 65.8Z" fill="white" opacity="0.6"/>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">Lightning Fast</h3>
                        <p class="text-base-content/60 leading-relaxed">Extract all thumbnail sizes in under 2 seconds. Our YouTube thumbnail viewer outperforms browser extensions with instant processing and no installation required.</p>
                    </div>
                </div>
                
                <div class="card bg-base-100 shadow-lg text-center animate-on-scroll" data-animate="fade-up">
                    <div class="card-body items-center text-center">
                        <div class="flex items-center justify-center mb-6">
                            <div class="w-16 h-16 feature-free organic-rounded-sm flex items-center justify-center performance-optimized">
                                <svg class="w-8 h-8 text-white drop-shadow-lg" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M50 15.2C50 13.8 49.2 12.6 47.9 12.1C44.3 10.8 38.7 10.3 32.1 11.8C29.8 12.3 28.1 14.4 28.1 16.8V45.6C28.1 63.2 39.8 78.9 47.2 85.7C49.1 87.4 51.9 87.4 53.8 85.7C61.2 78.9 72.9 63.2 72.9 45.6V16.8C72.9 14.4 71.2 12.3 68.9 11.8C62.3 10.3 56.7 10.8 53.1 12.1C51.8 12.6 51 13.8 51 15.2H50Z" fill="white"/>
                                    <path d="M42.8 48.6C41.9 47.6 40.3 47.6 39.4 48.6C38.5 49.5 38.5 51.1 39.4 52.0L45.2 57.8C46.1 58.7 47.7 58.7 48.6 57.8L62.6 43.8C63.5 42.9 63.5 41.3 62.6 40.4C61.7 39.5 60.1 39.5 59.2 40.4L46.9 52.7L42.8 48.6Z" fill="url(#checkGradient)"/>
                                    <defs>
                                        <linearGradient id="checkGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#30d158;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#28a745;stop-opacity:1" />
                                        </linearGradient>
                                    </defs>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">100% Free</h3>
                        <p class="text-base-content/60 leading-relaxed">No registration, no watermarks, no limitations. Unlike YouTube thumbnail viewer extensions that require installation, our web-based tool is completely free and accessible from any device.</p>
                    </div>
                </div>
                
                <div class="card bg-base-100 shadow-lg text-center animate-on-scroll" data-animate="slide-right">
                    <div class="card-body items-center text-center">
                        <div class="flex items-center justify-center mb-6">
                            <div class="w-16 h-16 feature-quality organic-rounded-sm flex items-center justify-center performance-optimized">
                                <svg class="w-8 h-8 text-white drop-shadow-lg" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M50 8.3C51.1 8.3 52.1 8.9 52.5 9.8L65.8 38.2C66.1 38.8 66.1 39.5 65.8 40.1L52.5 68.5C52.1 69.4 51.1 70.0 50 70.0C48.9 70.0 47.9 69.4 47.5 68.5L34.2 40.1C33.9 39.5 33.9 38.8 34.2 38.2L47.5 9.8C47.9 8.9 48.9 8.3 50 8.3Z" fill="white"/>
                                    <circle cx="30" cy="25" r="3.2" fill="white" opacity="0.8"/>
                                    <circle cx="75" cy="28" r="2.5" fill="white" opacity="0.7"/>
                                    <circle cx="82" cy="52" r="2.8" fill="white" opacity="0.9"/>
                                    <circle cx="25" cy="65" r="2.2" fill="white" opacity="0.6"/>
                                    <circle cx="70" cy="78" r="3.5" fill="white" opacity="0.8"/>
                                    <path d="M44.2 25.6C44.2 24.4 45.2 23.4 46.4 23.4H53.6C54.8 23.4 55.8 24.4 55.8 25.6C55.8 26.8 54.8 27.8 53.6 27.8H46.4C45.2 27.8 44.2 26.8 44.2 25.6Z" fill="url(#qualityGradient)" opacity="0.7"/>
                                    <path d="M42.5 39.2C42.5 38.0 43.5 37.0 44.7 37.0H55.3C56.5 37.0 57.5 38.0 57.5 39.2C57.5 40.4 56.5 41.4 55.3 41.4H44.7C43.5 41.4 42.5 40.4 42.5 39.2Z" fill="url(#qualityGradient)" opacity="0.8"/>
                                    <path d="M44.2 52.8C44.2 51.6 45.2 50.6 46.4 50.6H53.6C54.8 50.6 55.8 51.6 55.8 52.8C55.8 54.0 54.8 55.0 53.6 55.0H46.4C45.2 55.0 44.2 54.0 44.2 52.8Z" fill="url(#qualityGradient)" opacity="0.6"/>
                                    <defs>
                                        <linearGradient id="qualityGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#5856d6;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#3634a3;stop-opacity:1" />
                                        </linearGradient>
                                    </defs>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">Premium Quality</h3>
                        <p class="text-base-content/60 leading-relaxed">Access all available resolutions up to 4K. Our advanced YouTube thumbnail viewer 4K technology ensures you get the highest quality images available from any video.</p>
                    </div>
                </div>
            </div>
            
        </div>
    </section>

    <!-- Use Cases Section -->
    <section class="py-20 lg:py-32 section-bg-secondary relative">
        <div class="max-w-7xl mx-auto px-6 lg:px-8">
            
            <!-- Header -->
            <div class="text-center mb-16 animate-on-scroll" data-animate="fade-up">
                <h2 class="text-3xl lg:text-4xl font-bold mb-6">Trusted by Content Creators Worldwide</h2>
                <p class="text-xl text-base-content/60 max-w-3xl mx-auto">
                    From independent bloggers to major publications, our YouTube thumbnail viewer 
                    is the preferred choice for extracting high-quality video thumbnails.
                </p>
            </div>
            
            <!-- Use Cases Grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 max-w-5xl mx-auto">
                
                <div class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 animate-on-scroll" data-animate="slide-left">
                    <div class="card-body">
                        <div class="flex items-center justify-start mb-6">
                            <div class="w-12 h-12 organic-rounded-sm flex items-center justify-center usecase-content performance-optimized">
                                <svg class="w-6 h-6 text-white drop-shadow-sm" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">Content Creators & Bloggers</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            Popular sites like Boing Boing use our YouTube thumbnail viewer for their video content curation. 
                            Perfect for blog posts, articles, and social media content where high-quality visuals matter.
                        </p>
                    </div>
                </div>
                
                <div class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 animate-on-scroll" data-animate="fade-up" style="animation-delay: 0.2s;">
                    <div class="card-body">
                        <div class="flex items-center justify-start mb-6">
                            <div class="w-12 h-12 organic-rounded-sm flex items-center justify-center usecase-marketing performance-optimized">
                                <svg class="w-6 h-6 text-white drop-shadow-sm" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-1 16H9V7h9v14z"/>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">Marketing Professionals</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            Marketing teams prefer our tool over YouTube thumbnail viewer extension options 
                            because it works instantly without software installation, perfect for team collaboration.
                        </p>
                    </div>
                </div>
                
                <div class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 animate-on-scroll" data-animate="slide-right" style="animation-delay: 0.4s;">
                    <div class="card-body">
                        <div class="flex items-center justify-start mb-6">
                            <div class="w-12 h-12 organic-rounded-sm flex items-center justify-center usecase-media performance-optimized">
                                <svg class="w-6 h-6 text-white drop-shadow-sm" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                </svg>
                            </div>
                        </div>
                        <h3 class="card-title text-xl mb-4">Media & Publishers</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            News outlets and publishers rely on our boing boing YouTube thumbnail viewer capabilities 
                            for quick thumbnail extraction when covering viral videos and trending content.
                        </p>
                    </div>
                </div>
                
            </div>
            
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="py-20 lg:py-32 bg-base-100">
        <div class="max-w-4xl mx-auto px-6 lg:px-8">
            
            <div class="text-center mb-16 animate-on-scroll" data-animate="fade-up">
                <h2 class="text-3xl lg:text-4xl font-bold mb-6">Frequently Asked Questions</h2>
                <p class="text-xl text-base-content/60">
                    Everything you need to know about our YouTube thumbnail viewer tool
                </p>
            </div>
            
            <div class="space-y-6">
                
                <div class="card bg-base-200 animate-on-scroll" data-animate="fade-up">
                    <div class="card-body">
                        <h3 class="card-title text-xl mb-4">What makes this YouTube thumbnail viewer different from browser extensions?</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            Unlike YouTube thumbnail viewer extension tools that require installation and permissions, 
                            our web-based solution works instantly in any browser. No downloads, no security concerns, 
                            and no compatibility issues across different devices.
                        </p>
                    </div>
                </div>
                
                <div class="card bg-base-200 animate-on-scroll" data-animate="fade-up" style="animation-delay: 0.1s;">
                    <div class="card-body">
                        <h3 class="card-title text-xl mb-4">Can I extract 4K quality thumbnails?</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            Yes! Our YouTube thumbnail viewer 4K tool automatically detects and provides access to 
                            the highest resolution thumbnail available for each video, including Ultra HD (4K) when available.
                        </p>
                    </div>
                </div>
                
                <div class="card bg-base-200 animate-on-scroll" data-animate="fade-up" style="animation-delay: 0.2s;">
                    <div class="card-body">
                        <h3 class="card-title text-xl mb-4">Is this tool suitable for professional use?</h3>
                        <p class="text-base-content/60 leading-relaxed">
                            Absolutely! Our YouTube thumbnail viewer HD tool is trusted by content creators, 
                            publishers, and marketing professionals worldwide for high-quality thumbnail extraction 
                            in commercial projects and editorial content.
                        </p>
                    </div>
                </div>
                
            </div>
            
        </div>
    </section>

    <!-- Notification System -->
    <div 
        x-data="{ 
            notifications: [],
            add(message) {
                const notification = {
                    id: Date.now(),
                    message
                };
                this.notifications.push(notification);
                setTimeout(() => {
                    this.notifications = this.notifications.filter(n => n.id !== notification.id);
                }, 4000);
            }
        }"
        @notify.window="add($event.detail.message)"
        class="toast toast-top toast-end z-50"
    >
        <template x-for="notification in notifications" x-bind:key="notification.id">
            <div 
                class="alert alert-success organic-rounded-lg animate-slide-in relative overflow-hidden"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 transform translate-x-full"
                x-transition:enter-end="opacity-1 transform translate-x-0"
                x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-1 transform translate-x-0"
                x-transition:leave-end="opacity-0 transform translate-x-full"
            >
                <div class="notification-icon w-11 h-11 organic-rounded-sm flex items-center justify-center flex-shrink-0">
                    <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="flex-1">
                    <h3 class="font-bold" x-text="notification.message"></h3>
                    <div class="text-xs">Successfully completed</div>
                </div>
            </div>
        </template>
    </div>
</div> 